/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Screen1ViewBase::Screen1ViewBase() :
    frameCountEncCntUpdateInterval(0),
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    backgroundOut.setPosition(240, 0, 240, 272);
    backgroundOut.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    backgroundIn.setPosition(0, 0, 240, 272);
    backgroundIn.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    btn1.setXY(297, 67);
    btn1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    btn1.setLabelText(touchgfx::TypedText(T___SINGLEUSE_ALD7));
    btn1.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn1.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn1.setAction(buttonCallback);

    labelIn.setXY(56, 10);
    labelIn.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    labelIn.setLinespacing(0);
    labelIn.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZVOY));

    labelOut.setXY(265, 10);
    labelOut.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    labelOut.setLinespacing(0);
    labelOut.setTypedText(touchgfx::TypedText(T___SINGLEUSE_066M));

    boxWithBorder1.setPosition(35, 67, 170, 60);
    boxWithBorder1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
    boxWithBorder1.setBorderSize(5);

    encCnt.setXY(97, 97);
    encCnt.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    encCnt.setLinespacing(0);
    Unicode::snprintf(encCntBuffer, ENCCNT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ZQFJ).getText());
    encCnt.setWildcard(encCntBuffer);
    encCnt.resizeToCurrentText();
    encCnt.setTypedText(touchgfx::TypedText(T___SINGLEUSE_SN1A));

    textArea1.setXY(47, 75);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5G4V));

    circle1.setPosition(257, 77, 40, 40);
    circle1.setCenter(20, 20);
    circle1.setRadius(20);
    circle1.setLineWidth(0);
    circle1.setArc(0, 360);
    circle1Painter.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    circle1.setPainter(circle1Painter);

    boxWithBorder2.setPosition(35, 136, 170, 60);
    boxWithBorder2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    boxWithBorder2.setBorderColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
    boxWithBorder2.setBorderSize(5);

    textArea2.setXY(65, 144);
    textArea2.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea2.setLinespacing(0);
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CZBA));

    btnState.setXY(56, 166);
    btnState.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    btnState.setLinespacing(0);
    Unicode::snprintf(btnStateBuffer, BTNSTATE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ED87).getText());
    btnState.setWildcard(btnStateBuffer);
    btnState.resizeToCurrentText();
    btnState.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ALFT));

    btn2.setXY(297, 136);
    btn2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    btn2.setLabelText(touchgfx::TypedText(T___SINGLEUSE_ZAXX));
    btn2.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn2.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    btn2.setAction(buttonCallback);

    boxWithBorder3.setPosition(35, 206, 366, 60);
    boxWithBorder3.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    boxWithBorder3.setBorderColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
    boxWithBorder3.setBorderSize(5);

    textArea3.setXY(44, 214);
    textArea3.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea3.setLinespacing(0);
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1W9P));

    spMsg.setXY(44, 236);
    spMsg.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    spMsg.setLinespacing(0);
    Unicode::snprintf(spMsgBuffer, SPMSG_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_QOBU).getText());
    spMsg.setWildcard(spMsgBuffer);
    spMsg.resizeToCurrentText();
    spMsg.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7PGW));

    btn3.setXY(407, 206);
    btn3.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
    btn3.setAction(buttonCallback);

    add(__background);
    add(backgroundOut);
    add(backgroundIn);
    add(btn1);
    add(labelIn);
    add(labelOut);
    add(boxWithBorder1);
    add(encCnt);
    add(textArea1);
    add(circle1);
    add(boxWithBorder2);
    add(textArea2);
    add(btnState);
    add(btn2);
    add(boxWithBorder3);
    add(textArea3);
    add(spMsg);
    add(btn3);
}

void Screen1ViewBase::setupScreen()
{

}

//Handles tick based events
void Screen1ViewBase::handleTickEvent()
{
    frameCountEncCntUpdateInterval++;
    if(frameCountEncCntUpdateInterval == TICK_ENCCNTUPDATE_INTERVAL)
    {
        //EncCntUpdate
        //When every N tick execute C++ code
        //Execute C++ code
        static int N = 0;
        N++;
        Unicode::snprintf(encCntBuffer, ENCCNT_SIZE, "%03d", __HAL_TIM_GET_COUNTER(&htim3)/4);
        encCnt.invalidate();
        frameCountEncCntUpdateInterval = 0;
    }

    //BtnCheck
    //When every N tick execute C++ code
    //Execute C++ code
    if(!HAL_GPIO_ReadPin(ARDUINO_D5_GPIO_Port, ARDUINO_D5_Pin))
    {
      Unicode::snprintf(btnStateBuffer, BTNSTATE_SIZE, "  PRESSED  ");
      btnState.setColor(touchgfx::Color::getColorFromRGB(0, 255, 0));
    }
    else
    {
      Unicode::snprintf(btnStateBuffer, BTNSTATE_SIZE, "NOT PRESSED");
      btnState.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    }	
    btnState.invalidate();

    //SpUpdate
    //When every N tick execute C++ code
    //Execute C++ code
    if(rxNewData)
    {
      rxNewData = 0;
      Unicode::fromUTF8(rxBuffer, spMsgBuffer+3, SPMSG_SIZE-3);
      spMsg.invalidate();
      spMsg.resizeToCurrentText();
      spMsg.invalidate();
    }

}

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &btn1)
    {
        //LedTogggle
        //When btn1 clicked execute C++ code
        //Execute C++ code
        HAL_GPIO_TogglePin(ARDUINO_D4_GPIO_Port, ARDUINO_D4_Pin);

        //BoxColorToggle
        //When btn1 clicked execute C++ code
        //Execute C++ code
        static int n = 0;        
        n++;
                
        if(n%2)
        {
          circle1Painter.setColor(touchgfx::Color::getColorFromRGB(0, 0, 255));
          circle1.setPainter(circle1Painter);
        }
        else
        {
          circle1Painter.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
          circle1.setPainter(circle1Painter);
        }
        circle1.invalidate();
    }
    else if (&src == &btn2)
    {
        //SendHello
        //When btn2 clicked execute C++ code
        //Execute C++ code
        static const uint8_t hello[] = "Hello, World!\r\n";
        HAL_UART_Transmit(&huart1, hello, sizeof(hello)-1, 10);
    }
    else if (&src == &btn3)
    {
        //PlotScreen
        //When btn3 clicked change screen to Screen2
        //Go to Screen2 with no screen transition
        application().gotoScreen2ScreenNoTransition();
    }
}
