/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/mainscreen_screen/MainScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MainScreenViewBase::MainScreenViewBase() :
    sliderValueChangedCallback(this, &MainScreenViewBase::sliderValueChangedCallbackHandler)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    background.setPosition(0, 0, 480, 272);
    background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    pwmSlider.setXY(61, 111);
    pwmSlider.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_MEDIUM_SLIDER_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_MEDIUM_SLIDER_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_MEDIUM_INDICATORS_SLIDER_ROUND_NOB_ID));
    pwmSlider.setupHorizontalSlider(2, 18, 2, 0, 310);
    pwmSlider.setValueRange(0, 100);
    pwmSlider.setValue(0);
    pwmSlider.setNewValueCallback(sliderValueChangedCallback);

    pwmValue.setXY(274, 79);
    pwmValue.setColor(touchgfx::Color::getColorFromRGB(232, 183, 183));
    pwmValue.setLinespacing(0);
    Unicode::snprintf(pwmValueBuffer, PWMVALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_IF3W).getText());
    pwmValue.setWildcard(pwmValueBuffer);
    pwmValue.resizeToCurrentText();
    pwmValue.setTypedText(touchgfx::TypedText(T___SINGLEUSE_A04Z));

    pwmUnit.setXY(326, 79);
    pwmUnit.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    pwmUnit.setLinespacing(0);
    pwmUnit.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KXSZ));

    pwmLabel.setXY(61, 79);
    pwmLabel.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    pwmLabel.setLinespacing(0);
    pwmLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_11XQ));

    add(__background);
    add(background);
    add(pwmSlider);
    add(pwmValue);
    add(pwmUnit);
    add(pwmLabel);
}

void MainScreenViewBase::setupScreen()
{

}

void MainScreenViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &pwmSlider)
    {
        //changeDutyCycle
        //When pwmSlider value changed execute C++ code
        //Execute C++ code
        // Set TIM Capture/Compare register value
        unsigned int ARR = __HAL_TIM_GET_AUTORELOAD(&htim12);
        __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, (ARR+1)*value / 100);
        // Update label
        float output_voltage = 3.3 * value / 100.0;
        int volts = (int)output_voltage;
        int centivolts = (int)(100.0*output_voltage) - 100*volts;
        Unicode::snprintf(pwmValueBuffer, PWMVALUE_SIZE, "%d.%02d", volts, centivolts);
        pwmValue.invalidate();
    }
}
