/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/mainscreen_screen/mainScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>

mainScreenViewBase::mainScreenViewBase() :
    frameCountupdateGaugeInterval(0)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    background.setPosition(0, 0, 480, 272);
    background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    gaugeADC.setBackground(touchgfx::Bitmap(BITMAP_BLUE_GAUGES_ORIGINAL_GAUGE_BACKGROUND_STYLE_01_ID));
    gaugeADC.setPosition(115, 11, 251, 251);
    gaugeADC.setCenter(125, 125);
    gaugeADC.setStartEndAngle(-90, 90);
    gaugeADC.setRange(0, 100);
    gaugeADC.setValue(50);
    gaugeADC.setNeedle(BITMAP_BLUE_NEEDLES_ORIGINAL_GAUGE_NEEDLE_STYLE_00_ID, 11, 55);
    gaugeADC.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gaugeADC.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);

    add(__background);
    add(background);
    add(gaugeADC);
}

void mainScreenViewBase::setupScreen()
{

}

//Handles tick based events
void mainScreenViewBase::handleTickEvent()
{
    frameCountupdateGaugeInterval++;
    if(frameCountupdateGaugeInterval == TICK_UPDATEGAUGE_INTERVAL)
    {
        //updateGauge
        //When every N tick execute C++ code
        //Execute C++ code
        int adcValue = 0;
        if (HAL_ADC_PollForConversion(&hadc3, 10) == HAL_OK) {
          adcValue = 100.0 * HAL_ADC_GetValue(&hadc3) / 4095.0;
          HAL_ADC_Start(&hadc3);
        }
        gaugeADC.updateValue(adcValue, 10);
        frameCountupdateGaugeInterval = 0;
    }

}
